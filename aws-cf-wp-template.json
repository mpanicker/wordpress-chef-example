{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "AWS CloudFormation Sample Template WordPress_Multi_AZ: WordPress is web software you can use to create a beautiful website or blog. This template installs a highly-available, scalable WordPress deployment using a multi-az Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Application Load Balancer and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",

	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Default": "manoj-ohio-kp",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},

		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},

		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},

		"DBClass": {
			"Description": "Database instance class",
			"Type": "String",
			"Default": "db.t2.micro",
			"AllowedValues": ["db.t1.micro", "db.m1.small", "db.m1.medium", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.cr1.8xlarge", "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"],
			"ConstraintDescription": "must select a valid database instance type."
		},

		"DBName": {
			"Default": "wordpressdb",
			"Description": "The WordPress database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},

		"DBUser": {
			"NoEcho": "true",
			"Default": "admin",
			"Description": "The WordPress database admin account username",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},

		"DBPassword": {
			"NoEcho": "true",
			"Default": "password",
			"Description": "The WordPress database admin account password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},

		"MultiAZDatabase": {
			"Default": "false",
			"Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
			"Type": "String",
			"AllowedValues": ["true", "false"],
			"ConstraintDescription": "must be either true or false."
		},

		"WebServerCapacity": {
			"Default": "1",
			"Description": "The initial number of WebServer instances",
			"Type": "Number",
			"MinValue": "1",
			"MaxValue": "5",
			"ConstraintDescription": "must be between 1 and 5 EC2 instances."
		},

		"DBAllocatedStorage": {
			"Default": "5",
			"Description": "The size of the database (Gb)",
			"Type": "Number",
			"MinValue": "5",
			"MaxValue": "1024",
			"ConstraintDescription": "must be between 5 and 1024Gb."
		}
	},

	"Mappings": {
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "HVM64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "HVM64"
			},
			"m1.medium": {
				"Arch": "HVM64"
			},
			"m1.large": {
				"Arch": "HVM64"
			},
			"m1.xlarge": {
				"Arch": "HVM64"
			},
			"m2.xlarge": {
				"Arch": "HVM64"
			},
			"m2.2xlarge": {
				"Arch": "HVM64"
			},
			"m2.4xlarge": {
				"Arch": "HVM64"
			},
			"m3.medium": {
				"Arch": "HVM64"
			},
			"m3.large": {
				"Arch": "HVM64"
			},
			"m3.xlarge": {
				"Arch": "HVM64"
			},
			"m3.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.large": {
				"Arch": "HVM64"
			},
			"m4.xlarge": {
				"Arch": "HVM64"
			},
			"m4.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.4xlarge": {
				"Arch": "HVM64"
			},
			"m4.10xlarge": {
				"Arch": "HVM64"
			},
			"c1.medium": {
				"Arch": "HVM64"
			},
			"c1.xlarge": {
				"Arch": "HVM64"
			},
			"c3.large": {
				"Arch": "HVM64"
			},
			"c3.xlarge": {
				"Arch": "HVM64"
			},
			"c3.2xlarge": {
				"Arch": "HVM64"
			},
			"c3.4xlarge": {
				"Arch": "HVM64"
			},
			"c3.8xlarge": {
				"Arch": "HVM64"
			},
			"c4.large": {
				"Arch": "HVM64"
			},
			"c4.xlarge": {
				"Arch": "HVM64"
			},
			"c4.2xlarge": {
				"Arch": "HVM64"
			},
			"c4.4xlarge": {
				"Arch": "HVM64"
			},
			"c4.8xlarge": {
				"Arch": "HVM64"
			},
			"g2.2xlarge": {
				"Arch": "HVMG2"
			},
			"g2.8xlarge": {
				"Arch": "HVMG2"
			},
			"r3.large": {
				"Arch": "HVM64"
			},
			"r3.xlarge": {
				"Arch": "HVM64"
			},
			"r3.2xlarge": {
				"Arch": "HVM64"
			},
			"r3.4xlarge": {
				"Arch": "HVM64"
			},
			"r3.8xlarge": {
				"Arch": "HVM64"
			},
			"i2.xlarge": {
				"Arch": "HVM64"
			},
			"i2.2xlarge": {
				"Arch": "HVM64"
			},
			"i2.4xlarge": {
				"Arch": "HVM64"
			},
			"i2.8xlarge": {
				"Arch": "HVM64"
			},
			"d2.xlarge": {
				"Arch": "HVM64"
			},
			"d2.2xlarge": {
				"Arch": "HVM64"
			},
			"d2.4xlarge": {
				"Arch": "HVM64"
			},
			"d2.8xlarge": {
				"Arch": "HVM64"
			},
			"hi1.4xlarge": {
				"Arch": "HVM64"
			},
			"hs1.8xlarge": {
				"Arch": "HVM64"
			},
			"cr1.8xlarge": {
				"Arch": "HVM64"
			},
			"cc2.8xlarge": {
				"Arch": "HVM64"
			}
		},

		"AWSInstanceType2NATArch": {
			"t1.micro": {
				"Arch": "NATHVM64"
			},
			"t2.nano": {
				"Arch": "NATHVM64"
			},
			"t2.micro": {
				"Arch": "NATHVM64"
			},
			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			},
			"m1.small": {
				"Arch": "NATHVM64"
			},
			"m1.medium": {
				"Arch": "NATHVM64"
			},
			"m1.large": {
				"Arch": "NATHVM64"
			},
			"m1.xlarge": {
				"Arch": "NATHVM64"
			},
			"m2.xlarge": {
				"Arch": "NATHVM64"
			},
			"m2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"m3.medium": {
				"Arch": "NATHVM64"
			},
			"m3.large": {
				"Arch": "NATHVM64"
			},
			"m3.xlarge": {
				"Arch": "NATHVM64"
			},
			"m3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.large": {
				"Arch": "NATHVM64"
			},
			"m4.xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.10xlarge": {
				"Arch": "NATHVM64"
			},
			"c1.medium": {
				"Arch": "NATHVM64"
			},
			"c1.xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.large": {
				"Arch": "NATHVM64"
			},
			"c3.xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.large": {
				"Arch": "NATHVM64"
			},
			"c4.xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.8xlarge": {
				"Arch": "NATHVM64"
			},
			"g2.2xlarge": {
				"Arch": "NATHVMG2"
			},
			"g2.8xlarge": {
				"Arch": "NATHVMG2"
			},
			"r3.large": {
				"Arch": "NATHVM64"
			},
			"r3.xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"hi1.4xlarge": {
				"Arch": "NATHVM64"
			},
			"hs1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cr1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cc2.8xlarge": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"HVM64": "ami-0ff8a91507f77f867",
				"HVMG2": "ami-0a584ac55a7631c0c"
			},
			"us-west-2": {
				"HVM64": "ami-a0cfeed8",
				"HVMG2": "ami-0e09505bc235aa82d"
			},
			"us-west-1": {
				"HVM64": "ami-0bdb828fd58c52235",
				"HVMG2": "ami-066ee5fd4a9ef77f1"
			},
			"eu-west-1": {
				"HVM64": "ami-047bb4163c506cd98",
				"HVMG2": "ami-0a7c483d527806435"
			},
			"eu-west-2": {
				"HVM64": "ami-f976839e",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-west-3": {
				"HVM64": "ami-0ebc281c20e89ba4b",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-central-1": {
				"HVM64": "ami-0233214e13e500f77",
				"HVMG2": "ami-06223d46a6d0661c7"
			},
			"ap-northeast-1": {
				"HVM64": "ami-06cd52961ce9f0d85",
				"HVMG2": "ami-053cdd503598e4a9d"
			},
			"ap-northeast-2": {
				"HVM64": "ami-0a10b2721688ce9d2",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-northeast-3": {
				"HVM64": "ami-0d98120a9fb693f07",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-southeast-1": {
				"HVM64": "ami-08569b978cc4dfa10",
				"HVMG2": "ami-0be9df32ae9f92309"
			},
			"ap-southeast-2": {
				"HVM64": "ami-09b42976632b27e9b",
				"HVMG2": "ami-0a9ce9fecc3d1daf8"
			},
			"ap-south-1": {
				"HVM64": "ami-0912f71e06545ad88",
				"HVMG2": "ami-097b15e89dbdcfcf4"
			},
			"us-east-2": {
				"HVM64": "ami-0b59bfac6be064b78",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ca-central-1": {
				"HVM64": "ami-0b18956f",
				"HVMG2": "NOT_SUPPORTED"
			},
			"sa-east-1": {
				"HVM64": "ami-07b14488da8ea02a0",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"HVM64": "ami-0a4eaf6c4454eda75",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-northwest-1": {
				"HVM64": "ami-6b6a7d09",
				"HVMG2": "NOT_SUPPORTED"
			}
		},
		"Region2Principal": {
			"us-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-3": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-3": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-south-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-east-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ca-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"sa-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"cn-north-1": {
				"EC2Principal": "ec2.amazonaws.com.cn",
				"OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
			},
			"cn-northwest-1": {
				"EC2Principal": "ec2.amazonaws.com.cn",
				"OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
			},
			"eu-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			}
		},
		"Region2ARNPrefix": {
			"us-east-1": {
				"ARNPrefix": "arn:aws:"
			},
			"us-west-1": {
				"ARNPrefix": "arn:aws:"
			},
			"us-west-2": {
				"ARNPrefix": "arn:aws:"
			},
			"eu-west-1": {
				"ARNPrefix": "arn:aws:"
			},
			"eu-west-2": {
				"ARNPrefix": "arn:aws:"
			},
			"eu-west-3": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-northeast-1": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-northeast-2": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-northeast-3": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-southeast-1": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-southeast-2": {
				"ARNPrefix": "arn:aws:"
			},
			"ap-south-1": {
				"ARNPrefix": "arn:aws:"
			},
			"us-east-2": {
				"ARNPrefix": "arn:aws:"
			},
			"ca-central-1": {
				"ARNPrefix": "arn:aws:"
			},
			"sa-east-1": {
				"ARNPrefix": "arn:aws:"
			},
			"cn-north-1": {
				"ARNPrefix": "arn:aws-cn:"
			},
			"cn-northwest-1": {
				"ARNPrefix": "arn:aws-cn:"
			},
			"eu-central-1": {
				"ARNPrefix": "arn:aws:"
			}
		}

	},

	"Resources": {
		"ManojVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"Tags": [{
						"Key": "Name",
						"Value": "MP-VPC"
					}
				]
			}
		},

		"ManojInternetGateway": {
			"DependsOn": "ManojVPC",
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
						"Key": "Name",
						"Value": "MP-IGW"
					}
				]
			}
		},

		"AttachGateway": {
			"DependsOn": "ManojInternetGateway",
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"InternetGatewayId": {
					"Ref": "ManojInternetGateway"
				}
			}
		},

		"ManojPublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"CidrBlock": "10.0.1.0/24",
				"AvailabilityZone": "us-east-2a",
				"Tags": [{
						"Key": "Name",
						"Value": "ManojPublicSubnet"
					}
				]
			}
		},
		"ManojPublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"CidrBlock": "10.0.2.0/24",
				"AvailabilityZone": "us-east-2b",
				"Tags": [{
						"Key": "Name",
						"Value": "ManojPublicSubnet"
					}
				]
			}
		},
		"ManojPrivateSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"CidrBlock": "10.0.3.0/24",
				"AvailabilityZone": "us-east-2a",
				"Tags": [{
						"Key": "Name",
						"Value": "ManojPrivateSubnet"
					}
				]
			}
		},
		"ManojPrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"CidrBlock": "10.0.4.0/24",
				"AvailabilityZone": "us-east-2b",
				"Tags": [{
						"Key": "Name",
						"Value": "ManojPrivateSubnet1"
					}
				]
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"Tags": [{
						"Key": "Name",
						"Value": "ManojRouteTable"
					}
				]
			}
		},

		"PublicDefaultRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "ManojInternetGateway"
				}
			}
		},

		"SubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn": "AttachGateway",
			"Properties": {
				"SubnetId": {
					"Ref": "ManojPublicSubnet1"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn": "AttachGateway",
			"Properties": {
				"SubnetId": {
					"Ref": "ManojPublicSubnet2"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			}
		},

		"EIP": {
			"Type": "AWS::EC2::EIP",
			"DependsOn": "AttachGateway",
			"Properties": {
				"Domain": "ManojVPC"
			}
		},

		"NAT": {
			"DependsOn": "AttachGateway",
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["EIP", "AllocationId"]
				},
				"SubnetId": {
					"Ref": "ManojPublicSubnet1"
				}
			}
		},
		"PrivateRouteTable": {
			"Properties": {
				"VpcId": {
					"Ref": "ManojVPC"
				}
			},
			"Type": "AWS::EC2::RouteTable"
		},

		"NatRoute": {
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NAT"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			},
			"Type": "AWS::EC2::Route",
			"DependsOn": "PrivateRouteTable"
		},

		"PrivateRouteAssociation": {
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"SubnetId": {
					"Ref": "ManojPrivateSubnet1"
				}
			},
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn": "NatRoute"
		},

		"LogRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": [{
										"Fn::FindInMap": ["Region2Principal", {
												"Ref": "AWS::Region"
											}, "EC2Principal"]
									}
								]
							},
							"Action": ["sts:AssumeRole"]
						}
					]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "LogRolePolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
									"Effect": "Allow",
									"Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DescribeLogStreams"],
									"Resource": [{
											"Fn::Join": ["", [{
														"Fn::FindInMap": ["Region2ARNPrefix", {
																"Ref": "AWS::Region"
															}, "ARNPrefix"]
													},
													"logs:*:*:*"]]
										}
									]
								}
							]
						}
					}
				]
			}
		},
		"LogRoleInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
						"Ref": "LogRole"
					}
				]
			}
		},
		"CloudFormationLogs": {
			"Type": "AWS::Logs::LogGroup",
			"Properties": {
				"RetentionInDays": 7
			}
		},

		"VPCDefaultSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": ["ManojVPC", "DefaultSecurityGroup"]
				},
				"IpProtocol": "tcp",
				"FromPort": "80",
				"ToPort": "80",
				"CidrIp": "0.0.0.0/0"
			}
		},
		"ApplicationLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"DependsOn": "AttachGateway",
			"Properties": {
				"Subnets": [{
						"Ref": "ManojPublicSubnet1"
					}, {
						"Ref": "ManojPublicSubnet2"
					}
				]
			}
		},

		"ALBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "ALBTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "ApplicationLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},

		"ALBTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPath": "/wordpress/wp-admin/install.php",
				"HealthCheckIntervalSeconds": 10,
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Port": 80,
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "ManojVPC"
				},
				"TargetGroupAttributes":
				[{
						"Key": "stickiness.enabled",
						"Value": "true"
					}, {
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					}, {
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "30"
					}
				]
			}
		},

		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Fn::Select": [0, {
									"Fn::GetAtt": ["ApplicationLoadBalancer", "SecurityGroups"]
								}
							]
						}
					}, {
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					}
				],
				"VpcId": {
					"Ref": "ManojVPC"
				}
			}
		},

		"WebServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": [{
						"Ref": "ManojPublicSubnet1"
					}, {
						"Ref": "ManojPublicSubnet2"
					}
				],
				"LaunchConfigurationName": {
					"Ref": "LaunchConfig"
				},
				"MinSize": "1",
				"MaxSize": "5",
				"DesiredCapacity": {
					"Ref": "WebServerCapacity"
				},
				"TargetGroupARNs": [{
						"Ref": "ALBTargetGroup"
					}
				]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT15M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": "1",
					"MaxBatchSize": "1",
					"PauseTime": "PT15M",
					"WaitOnResourceSignals": "true"
				}
			}
		},

		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"wordpress_install": ["install_cfn", "install_chefdk", "install_chef", "install_wordpress", "run_chef"]
					},
					"install_cfn": {
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackId"
											}, "\n",
											"region=", {
												"Ref": "AWS::Region"
											}, "\n"
										]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ", {
												"Ref": "AWS::StackName"
											},
											"         --resource LaunchConfig ",
											"         --configsets wordpress_install ",
											"         --region ", {
												"Ref": "AWS::Region"
											}, "\n"
										]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					},
					"install_chef": {
						"sources": {
							"/var/chef/chef-repo": "http://github.com/opscode/chef-repo/tarball/master"
						},
						"files": {
							"/tmp/install.sh": {
								"source": "https://www.opscode.com/chef/install.sh",
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/var/chef/chef-repo/.chef/knife.rb": {
								"content": {
									"Fn::Join": [
										"",
										[
											"cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
											"node_path [ '/var/chef/chef-repo/nodes' ]\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/var/chef/chef-repo/.chef/client.rb": {
								"content": {
									"Fn::Join": [
										"",
										[
											"cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
											"node_path [ '/var/chef/chef-repo/nodes' ]\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"01_make_chef_readable": {
								"command": "chmod +rx /var/chef"
							},
							"02A_make_chef_executable": {
								"command": "chmod +rx /tmp/install.sh"
							},
							"02B_install_chef_12": {
								"command": "bash /tmp/install.sh -v 12.19.36",
								"cwd": "/var/chef"
							},
							"03_create_node_list": {
								"command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
								"cwd": "/var/chef/chef-repo",
								"env": {
									"HOME": "/var/chef"
								}
							}
						}
					},
					"install_chefdk": {
						"packages": {
							"rpm": {
								"chefdk": "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
							}
						}
					},
					"run_chef": {
						"commands": {
							"01_run_chef_client": {
								"command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
								"cwd": "/var/chef/chef-repo",
								"env": {
									"HOME": "/var/chef"
								}
							}
						}
					},
					"install_wordpress": {
						"files": {
							"/var/chef/chef-repo/.chef/knife.rb": {
								"content": {
									"Fn::Join": [
										"",
										[
											"cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress-chef-cookbook/berks-cookbooks' ]\n",
											"node_path [ '/var/chef/chef-repo/nodes' ]\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/var/chef/chef-repo/.chef/client.rb": {
								"content": {
									"Fn::Join": [
										"",
										[
											"cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress-chef-cookbook/berks-cookbooks' ]\n",
											"node_path [ '/var/chef/chef-repo/nodes' ]\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/var/chef/chef-repo/cookbooks/wordpress-chef-cookbook/attributes/aws_rds_config.rb": {
								"content": {
									"Fn::Join": [
										"",
										[
											"normal['wordpress']['db']['pass'] = '", {
												"Ref": "DBPassword"
											},
											"'\n",
											"normal['wordpress']['db']['user'] = '", {
												"Ref": "DBUser"
											},
											"'\n",
											"normal['wordpress']['db']['host'] = '", {
												"Fn::GetAtt": [
													"DBInstance",
													"Endpoint.Address"
												]
											},
											"'\n",
											"normal['wordpress']['db']['name'] = '", {
												"Ref": "DBName"
											},
											"'\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"00_get_git": {
								"command": "yum -y install git ",
								"cwd": "/var/chef/chef-repo",
								"env": {
									"HOME": "/var/chef"
								}
							},
							"01_get_cookbook": {
								"command": "git clone https://github.com/mpanicker/wordpress-chef-cookbook.git",
								"cwd": "/var/chef/chef-repo/cookbooks",
								"env": {
									"HOME": "/var/chef"
								}
							},
							"03_init_berkshelf": {
								"command": "berks init /var/chef/chef-repo/cookbooks/wordpress-chef-cookbook --skip-vagrant --skip-git",
								"cwd": "/var/chef/chef-repo/cookbooks/wordpress-chef-cookbook",
								"env": {
									"HOME": "/var/chef"
								}
							},
							"04_vendorize_berkshelf": {
								"command": "berks vendor",
								"cwd": "/var/chef/chef-repo/cookbooks/wordpress-chef-cookbook",
								"env": {
									"HOME": "/var/chef"
								}
							},
							"05_configure_node_run_list": {
								"command": "knife node run_list add -z `knife node list -z` recipe[wordpress]",
								"cwd": "/var/chef/chef-repo",
								"env": {
									"HOME": "/var/chef"
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionArch2AMI", {
							"Ref": "AWS::Region"
						}, {
							"Fn::FindInMap": ["AWSInstanceType2Arch", {
									"Ref": "InstanceType"
								}, "Arch"]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "LogRoleInstanceProfile"
				},
				"SecurityGroups": [{
						"Ref": "WebServerSecurityGroup"
					}
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"AssociatePublicIpAddress": true,
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
								"#!/bin/bash -xe\n",
								"yum update -y aws-cfn-bootstrap\n",

								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource LaunchConfig ",
								"         --configsets wordpress_install ",
								"         --region ", {
									"Ref": "AWS::Region"
								}, "\n",

								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerGroup ",
								"         --region ", {
									"Ref": "AWS::Region"
								}, "\n"
							]]
					}
				}
			}
		},

		"DBEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open database for access",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"SourceSecurityGroupId": {
							"Ref": "WebServerSecurityGroup"
						}
					}
				],
				"VpcId": {
					"Ref": "ManojVPC"
				}
			}
		},

		"MyDBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "for MySQL DB",
				"SubnetIds": [{
						"Ref": "ManojPrivateSubnet1"
					}, {
						"Ref": "ManojPrivateSubnet2"
					}
				]
			}
		},

		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBName": {
					"Ref": "DBName"
				},
				"Engine": "MySQL",
				"MultiAZ": {
					"Ref": "MultiAZDatabase"
				},
				"MasterUsername": {
					"Ref": "DBUser"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				},
				"DBInstanceClass": {
					"Ref": "DBClass"
				},
				"AllocatedStorage": {
					"Ref": "DBAllocatedStorage"
				},
				"DBSubnetGroupName": {
					"Ref": "MyDBSubnetGroup"
				},
				"VPCSecurityGroups": [{
						"Fn::GetAtt": ["DBEC2SecurityGroup", "GroupId"]
					}
				]
			}
		}
	},

	"Outputs": {
		"WebsiteURL": {
			"Value": {
				"Fn::Join": ["", ["http://", {
							"Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]
						}, "/wordpress"]]
			},
			"Description": "WordPress Website"
		}
	}
}