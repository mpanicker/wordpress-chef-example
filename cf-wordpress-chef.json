{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template for WordPress_Chef: WordPress is web software you can use to create a beautiful website or blog. This template installs a highly available, scalable WordPress deployment using a multi-AZ (Availability Zone) Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy the Chef client and using Chef-client in local mode to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Elastic Load Balancing load balancer, and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "Web Server EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
        },
        "DBClass": {
            "Description": "Database instance class",
            "Type": "String",
            "Default": "db.t2.small",
            "AllowedValues": [
				"db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "DBName": {
            "Default": "wordpressdb",
            "Description": "The WordPress database nae",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "NoEcho": "true",
            "Description": "The WordPress database admin account user name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "The WordPress database admin account password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "MultiAZDatabase": {
            "Default": "false",
            "Description": "Create a multi-AZ MySQL Amazon RDS database instance",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be either true or false."
        },
        "WebServerCapacity": {
            "Default": "1",
            "Description": "The initial number of web server instances",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "1",
            "ConstraintDescription": "must be between 1 and 5 EC2 instances."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (GB)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024 GB."
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "HVM64"
            },
            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            }
        },
        "AWSInstanceType2NATArch": {
            "t1.micro": {
                "Arch": "NATHVM64"
            },
            "t2.nano": {
                "Arch": "NATHVM64"
            },
            "t2.micro": {
                "Arch": "NATHVM64"
            },
            "t2.small": {
                "Arch": "NATHVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "HVM64": "ami-0ff8a91507f77f867",
                "HVMG2": "ami-0a584ac55a7631c0c"
            },
			 "cn-north-1": {
                "HVM64": "ami-0a4eaf6c4454eda75",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },
    "Conditions": {
        "Is-EC2-VPC": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AWS::Region"
                        },
                        "us-east-1"
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AWS::Region"
                        },
                        "cn-north-1"
                    ]
                }
            ]
        },
        "Is-EC2-Classic": {
            "Fn::Not": [
                {
                    "Condition": "Is-EC2-VPC"
                }
            ]
        }
    },
    "Resources": {
		"ManojVPC" : {
			"Type" : "AWS::EC2::VPC",
			"Properties" : {
				"CidrBlock" : "10.0.0.0/16",
				"Tags" : [ {"Key" : "Name", "Value" : "MP-VPC"} ]
			}
		},


		"ManojInternetGateway" : {
			"DependsOn" : "ManojVPC",
			"Type" : "AWS::EC2::InternetGateway",
			"Properties" : {
            "Tags" : [ {"Key" : "Name", "Value" : "MP-IGW"}]
			}
		},


		"AttachGateway" : {
			"DependsOn" : "ManojInternetGateway",
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
			"VpcId" : { "Ref" : "ManojVPC" },
			"InternetGatewayId" : { "Ref" : "ManojInternetGateway" }
			}
		},



		"ManojPublicSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "ManojVPC" },
				"CidrBlock" : "10.0.0.0/24",
				"AvailabilityZone" : "us-east-1a",
				"Tags" : [ { "Key" : "Name", "Value" : "ManojPublicSubnet" } ]
			}
		},

	    "ManojPrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "ManojVPC" },
				"CidrBlock" : "10.0.1.0/24",
				"AvailabilityZone" : "us-east-1a",
				"Tags" : [ { "Key" : "Name", "Value" : "ManojPrivateSubnet" } ]
			}
		},
	    "ManojPrivateSubnet1" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "ManojVPC" },
				"CidrBlock" : "10.0.2.0/24",
				"AvailabilityZone" : "us-east-1b",
				"Tags" : [ { "Key" : "Name", "Value" : "ManojPrivateSubnet1" } ]
			}
		},
	  	"RouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
			"VpcId" : {"Ref" : "ManojVPC"},
			"Tags" : [ {"Key" : "Name", "Value" : "ManojRouteTable"} ]
			}
		},

	   "Route" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "ManojInternetGateway" }
			}
		},

	    "SubnetRouteTableAssociation1" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
			"SubnetId" : { "Ref" : "ManojPublicSubnet" },
			"RouteTableId" : { "Ref" : "RouteTable" }
			}
		},
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Metadata": {
                "Comment1": "Configure the Load Balancer with a simple health check and cookie-based stickiness",
                "Comment2": "Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes",
                "AWS::CloudFormation::Designer": {
                    "id": "e4b8832a-4ae3-4a6e-a992-c1a55fbcedd3"
                }
            },
            "Properties": {
                "Subnets":[{"Ref": "ManojPublicSubnet"}],
                "CrossZone": "false",
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "CookieBasedPolicy",
                        "CookieExpirationPeriod": "30"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "CookieBasedPolicy"
                        ]
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/wp-admin/install.php",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                }
            },
			"DependsOn": "AttachGateway"
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier" :["ManojPrivateSubnet"],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": {
                    "Ref": "WebServerCapacity"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1518f5af-bad1-415f-9859-89a7fdc3276b"
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "wordpress_install": [
                            "install_cfn",
                            "install_chefdk",
                            "install_chef",
                            "install_wordpress",
                            "run_chef"
                        ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource LaunchConfig ",
                                            "         --configsets wordpress_install ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "install_chef": {
                        "sources": {
                            "/var/chef/chef-repo": "http://github.com/opscode/chef-repo/tarball/master"
                        },
                        "files": {
                            "/tmp/install.sh": {
                                "source": "https://www.opscode.com/chef/install.sh",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/knife.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_make_chef_readable": {
                                "command": "chmod +rx /var/chef"
                            },
                            "02_install_chef": {
                                "command": "bash /tmp/install.sh",
                                "cwd": "/var/chef"
                            },
                            "03_create_node_list": {
                                "command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    },
                    "install_chefdk": {
                        "packages": {
                            "rpm": {
                                "chefdk": "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
                            }
                        }
                    },
                    "install_wordpress": {
                        "files": {
                            "/var/chef/chef-repo/.chef/knife.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/cookbooks/wordpress/attributes/aws_rds_config.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "normal['wordpress']['db']['pass'] = '",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "'\n",
                                            "normal['wordpress']['db']['user'] = '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'\n",
                                            "normal['wordpress']['db']['host'] = '",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "'\n",
                                            "normal['wordpress']['db']['name'] = '",
                                            {
                                                "Ref": "DBName"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_get_cookbook": {
                                "command": "knife cookbook site download wordpress",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "02_unpack_cookbook": {
                                "command": "tar xvfz /var/chef/chef-repo/wordpress*",
                                "cwd": "/var/chef/chef-repo/cookbooks"
                            },
                            "03_init_berkshelf": {
                                "command": "berks init /var/chef/chef-repo/cookbooks/wordpress --skip-vagrant --skip-git",
                                "cwd": "/var/chef/chef-repo/cookbooks/wordpress",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "04_vendorize_berkshelf": {
                                "command": "berks vendor",
                                "cwd": "/var/chef/chef-repo/cookbooks/wordpress",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "05_configure_node_run_list": {
                                "command": "knife node run_list add -z `knife node list -z` recipe[wordpress]",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    },
                    "run_chef": {
                        "commands": {
                            "01_run_chef_client": {
                                "command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "c650c238-1e3a-4dbd-ab02-cb90ad6cdff9"
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --configsets wordpress_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }

		},
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "Is-EC2-VPC",
            "Properties": {
                "GroupDescription": "Open database for access",
				"VpcId": {
					"Ref": "ManojVPC"
				},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupName": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c8f9d9c6-c447-4db7-b634-9f5c81688498"
                }
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Condition": "Is-EC2-Classic",
            "Properties": {
                "DBSecurityGroupIngress": {
                    "EC2SecurityGroupName": {
                        "Ref": "WebServerSecurityGroup"
                    }
                },
                "GroupDescription": "database access"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2fcdf1f8-93a5-4019-b176-a49b78c2741d"
                }
            }
        },
		"MyDBSubnetGroup": {
			"Type" : "AWS::RDS::DBSubnetGroup",
				"Properties" : {
					"DBSubnetGroupDescription" : "for MySQL DB",
					"SubnetIds" : [{"Ref": "ManojPrivateSubnet"},{"Ref": "ManojPrivateSubnet1"}]
			}
		},
        "DBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "Engine": "MySQL",
                "MultiAZ": {
                    "Ref": "MultiAZDatabase"
                },
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "DBInstanceClass": {
                    "Ref": "DBClass"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
				"DBSubnetGroupName" : { "Ref" : "MyDBSubnetGroup" },
                "VPCSecurityGroups": {
                    "Fn::If": [
                        "Is-EC2-VPC",
                        [
                            {
                                "Fn::GetAtt": [
                                    "DBEC2SecurityGroup",
                                    "GroupId"
                                ]
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "DBSecurityGroups": {
                    "Fn::If": [
                        "Is-EC2-Classic",
                        [
                            {
                                "Ref": "DBSecurityGroup"
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "43c4d562-7408-4b73-b0a0-529637286cb4"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
				"VpcId": {
					"Ref": "ManojVPC"
				},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupOwnerId": {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "SourceSecurityGroup.OwnerAlias"
                            ]
                        },
                        "SourceSecurityGroupName": {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d7955a49-ca3f-4bfa-b180-dd68c2ded834"
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "WordPress website"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "e4b8832a-4ae3-4a6e-a992-c1a55fbcedd3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "d7955a49-ca3f-4bfa-b180-dd68c2ded834": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "2fcdf1f8-93a5-4019-b176-a49b78c2741d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "c8f9d9c6-c447-4db7-b634-9f5c81688498": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "43c4d562-7408-4b73-b0a0-529637286cb4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "2fcdf1f8-93a5-4019-b176-a49b78c2741d"
                ]
            },
            "c650c238-1e3a-4dbd-ab02-cb90ad6cdff9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "d7955a49-ca3f-4bfa-b180-dd68c2ded834"
                ]
            },
            "1518f5af-bad1-415f-9859-89a7fdc3276b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "c650c238-1e3a-4dbd-ab02-cb90ad6cdff9",
                    "e4b8832a-4ae3-4a6e-a992-c1a55fbcedd3"
                ]
            }
        }
    }
}
